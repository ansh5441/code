who = read.csv("WHO.csv")
plot(WHO$GNI, WHO$FertilityRate)
WHO = read.csv("WHO.csv")
plot(WHO$GNI, WHO$FertilityRate)
install.packages("ggplot2")
library(ggplot2)
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
scatterplot + geom_point()
scatterplot + geom_line()
scatterplot + geom_point()
scatterplot + geom_point(color = "blue", size = 3, shape = 17) 
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
scatterplot + geom_point(color = "darkred", size = 3, shape = 8) 
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region)) + geom_point() + scale_color_brewer(palette="Dark2")
# Unit 7 - Lecture 2, Predictive Policing
# VIDEO 3 - A Basic Line Plot
# Load our data:
mvt = read.csv("mvt.csv", stringsAsFactors=FALSE)
str(mvt)
# Convert the Date variable to a format that R will recognize:
mvt$Date = strptime(mvt$Date, format="%m/%d/%y %H:%M")
# Extract the hour and the day of the week:
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$hour
# Let's take a look at the structure of our data again:
str(mvt)
# Create a simple line plot - need the total number of crimes on each day of the week. We can get this information by creating a table:
table(mvt$Weekday)
# Save this table as a data frame:
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts) 
# Load the ggplot2 library:
library(ggplot2)
# Create our plot
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))  
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggmap)
statesMap = map_data("state")
summary(statesMap)
str(statesMap)
str(statesMap$group)
summary(statesMap$group)
table(statesMap$group)
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
polling = read.csv("PollingImputed.csv")
library(caTools)
str(polling)
Train = subset(polling, Year<=2008)
Test = subset(polling, Year>2008)
Test = subset(polling, Year == 2012)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
TestPrediction = predict(mod2, newdata=Test, type="response")
TestPredictionBinary = as.numeric(TestPrediction > 0.5)
predictionDataFrame = data.frame(TestPrediction, TestPredictionBinary, Test$State)
summary(TestPredictionBinary)
sum(TestPredictionBinary)
summary(TestPredictionBinary)
predictionDataFrame$region = tolower(predictionDataFrame$Test.State)
predictionMap = merge(statesMap, predictionDataFrame, by = "region")
predictionMap = predictionMap[order(predictionMap$order),]
summary(predictionMap)
summary(statesMap)
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) + geom_polygon(color = "black")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
str(predictionMap)
str(predictionMap$region['florida'])
predictionMap$region['florida']
predictionMap$region
table(predictionMap$region, predictionMap$TestPrediction)
subset(predictionMap, region == 'florida')
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
?geom_polygon
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction, linetype = 3))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black", linetype = 3) + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black", linetype = 3, size = 3) + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black", size = 3) + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black", alpha = 0.3) + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black", linetype=3) + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
edges = read.csv("edges.csv")
users = read.csv("users.csv")
nrow(users)
nrow(edges)
2*146/59
table(users$locale)
table(users$locale, users$gender)
table(users$gender)
install.packages(igraph)
install.packages(igraph")
install.packages("igraph")
install.packages("igraph")
?graph.data.frame
library(ograph)
library(igraph)
?graph.data.frame
g = graph.data.frame(edges, FALSE, users) 
plot(g, vertex.size=5, vertex.label=NA)
degree(g)
V(g)$size = degree(g)/2+2
plot(g, vertex.label=NA)
 V(g)$size
V(g)$color = "black"
V(g)$color[V(g)$gender == "A"] = "red"
V(g)$color[V(g)$gender == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "B"] = "gray"
V(g)$color[V(g)$school == "A"] = "red"
plot(g, vertex.label=NA)
table(users$school)
V(g)$color[V(g)$school == "AB"] = "green"
plot(g, vertex.label=NA)
table(users$locale)
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "green"
plot(g, vertex.label=NA)
?igraph.plotting
tweets = tweets.csv("tweets.csv")
tweets = read.csv("tweets.csv")
tweets = read.csv("tweets.csv", stringsAsFactors = FALSE)
tweets = read.csv("tweets.csv", stringsAsFactors = FALSE)S
tweets = read.csv("tweets.csv", StringsAsFactors = FALSE)
tweets = read.csv("tweets.csv", stringsAsFactors = FALSE)
library(tm)
library(SnowballC)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
frequencies = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(frequencies))
nrow(allTweets)
table(allTweets)
str*allTweets)
str(allTweets)
install.packages("wordcloud")
?wordcloud
library(wordcloud)
?wordcloud
str(allTweets)
colSums(allTweets)
rowSums(allTweets)
sum(allTweets)
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25))
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets))
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
corpus = tm_map(corpus, stemDocument)
corpus = Corpus(VectorSource(tweets$Tweet))
plot(g, vertex.label=NA)tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
frequencies = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(frequencies))
 wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25))
install.packages("RColorBrewer")
library(RColorBrewer)
brewer.pal()
display.brewer.all()
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25), colors = brewer.pal(9, "Blues"))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25), colors = brewer.pal(9, "Blues")[c(-1, -2, -3, -4)])
display.brewer.all()
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25), colors = brewer.pal("Set3"))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25), colors = brewer.pal(9,"Set3"))
q()
q()
